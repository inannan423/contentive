package handler

import (
	"contentive/internal/database"
	"contentive/internal/logger"
	"contentive/internal/models"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/lib/pq"
)

func CreateAPIUser(c *fiber.Ctx) error {
	var input struct {
		Name        string               `json:"name"`
		ExpireAt    *time.Time           `json:"expire_at"`
		Status      models.APIUserStatus `json:"status"`
		Scopes      pq.StringArray       `json:"scopes"`
		Description string               `json:"description"`
	}

	if err := c.BodyParser(&input); err != nil {
		logger.Error("Failed to parse input: %v", err)
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid input",
		})
	}

	//	Check if the required fields are filled
	if input.Name == "" || input.Status == "" {
		logger.Error("Name and Status are required")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Name, ExpireAt and Status are required",
		})
	}

	//	Check if the status is valid
	if input.Status != models.APIUserStatusActive && input.Status != models.APIUserStatusInactive && input.Status != models.APIUserStatusExpired {
		logger.Error("Invalid status")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid status",
		})
	}

	// Check if the name is unique
	var existingAPIUser models.APIUser
	if err := database.DB.Where("name = ?", input.Name).First(&existingAPIUser).Error; err == nil {
		logger.Error("Name already exists")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Name already exists",
		})
	}

	// TODO: Check if the scopes are valid

	// If the Scopes are empty, set it to an empty array, meaning no scopes
	if input.Scopes == nil {
		input.Scopes = pq.StringArray{}
	}

	// Generate a new API user
	apiUser := models.APIUser{
		Name:        input.Name,
		ExpireAt:    input.ExpireAt,
		Status:      input.Status,
		Scopes:      input.Scopes,
		Description: input.Description,
		//	Token will be generated by BeforeCreate hook
	}

	// Create the API user
	if err := database.DB.Create(&apiUser).Error; err != nil {
		logger.Error("Failed to create API user: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to create API user",
		})
	}

	currentUser := c.Locals("user").(models.AdminUser)
	logger.AdminAction(
		currentUser.ID,
		currentUser.Name,
		"CREATE_API_USER",
		"Created API user: "+apiUser.Name,
	)

	return c.Status(fiber.StatusCreated).JSON(apiUser)
}

// GetAPIUsers returns all API users
func GetAPIUsers(c *fiber.Ctx) error {
	var apiUsers []models.APIUser
	if err := database.DB.Find(&apiUsers).Error; err != nil {
		logger.Error("Failed to get API users: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to get API users",
		})
	}

	return c.Status(fiber.StatusOK).JSON(apiUsers)
}

// GetAPIUserByID returns an API user by ID
func GetAPIUserByID(c *fiber.Ctx) error {
	id := c.Params("id")
	var apiUser models.APIUser
	if err := database.DB.Where("id = ?", id).First(&apiUser).Error; err != nil {
		logger.Error("Failed to get API user: %v", err)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "API user not found",
		})
	}

	return c.Status(fiber.StatusOK).JSON(apiUser)
}

// UpdateAPIUser updates an API user's name, description, expire_at, status or scopes, but not the token
func UpdateAPIUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var input struct {
		Name        *string               `json:"name"`
		ExpireAt    *time.Time            `json:"expire_at"`
		Status      *models.APIUserStatus `json:"status"`
		Scopes      *pq.StringArray       `json:"scopes"`
		Description *string               `json:"description"`
	}

	if err := c.BodyParser(&input); err != nil {
		logger.Error("Failed to parse input: %v", err)
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid input",
		})
	}

	// Get the API user
	var apiUser models.APIUser
	if err := database.DB.Where("id = ?", id).First(&apiUser).Error; err != nil {
		logger.Error("Failed to get API user: %v", err)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "API user not found",
		})
	}

	if input.Name != nil {
		if *input.Name != apiUser.Name {
			if *input.Name == "" {
				logger.Error("Name cannot be empty")
				return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
					"error": "Name cannot be empty",
				})
			}

			var existingAPIUser models.APIUser
			if err := database.DB.Where("name = ? AND id != ?", *input.Name, id).First(&existingAPIUser).Error; err == nil {
				logger.Error("Name already exists")
				return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
					"error": "Name already exists",
				})
			}
			apiUser.Name = *input.Name
		}
	}

	if input.ExpireAt != nil {
		apiUser.ExpireAt = input.ExpireAt
	}

	if input.Status != nil {
		if *input.Status != models.APIUserStatusActive &&
			*input.Status != models.APIUserStatusInactive &&
			*input.Status != models.APIUserStatusExpired {
			logger.Error("Invalid status")
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "Invalid status",
			})
		}
		apiUser.Status = *input.Status
	}

	if input.Scopes != nil {
		// TODO: Check if the scopes are valid
		apiUser.Scopes = *input.Scopes
	}

	if input.Description != nil {
		apiUser.Description = *input.Description
	}

	if err := database.DB.Save(&apiUser).Error; err != nil {
		logger.Error("Failed to update API user: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to update API user",
		})
	}

	currentUser := c.Locals("user").(models.AdminUser)
	logger.AdminAction(
		currentUser.ID,
		currentUser.Name,
		"UPDATE_API_USER",
		"Updated API user: "+apiUser.Name,
	)

	return c.Status(fiber.StatusOK).JSON(apiUser)
}

// DeleteAPIUser deletes an API user
func DeleteAPIUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var apiUser models.APIUser
	if err := database.DB.Where("id = ?", id).First(&apiUser).Error; err != nil {
		logger.Error("Failed to get API user: %v", err)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "API user not found",
		})
	}

	if err := database.DB.Delete(&apiUser).Error; err != nil {
		logger.Error("Failed to delete API user: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to delete API user",
		})
	}

	currentUser := c.Locals("user").(models.AdminUser)
	logger.AdminAction(
		currentUser.ID,
		currentUser.Name,
		"DELETE_API_USER",
		"Deleted API user: "+apiUser.Name,
	)

	return c.Status(fiber.StatusNoContent).JSON(fiber.Map{
		"message": "API user deleted successfully",
	})
}

func RegenerateAPIUserToken(c *fiber.Ctx) error {
	id := c.Params("id")
	var apiUser models.APIUser
	if err := database.DB.Where("id = ?", id).First(&apiUser).Error; err != nil {
		logger.Error("Failed to get API user: %v", err)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "API user not found",
		})
	}

	// Use GenerateAPIUserJWT to generate a new token
	token, err := apiUser.GenerateAPIUserJWT()
	if err != nil {
		logger.Error("Failed to generate token: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to generate token",
		})
	}

	apiUser.Token = token
	if err := database.DB.Save(&apiUser).Error; err != nil {
		logger.Error("Failed to update API user: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to update API user",
		})
	}

	currentUser := c.Locals("user").(models.AdminUser)
	logger.AdminAction(
		currentUser.ID,
		currentUser.Name,
		"REGENERATE_API_USER_TOKEN",
		"Regenerated token for API user: "+apiUser.Name,
	)

	return c.Status(fiber.StatusOK).JSON(apiUser)
}
